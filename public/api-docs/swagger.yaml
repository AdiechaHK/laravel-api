openapi: 3.0.0
info:
  title: Laravel Blog API
  description: API documentation for Laravel Blog API with JWT Authentication
  version: 1.0.0
  contact:
    email: admin@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://your-production-domain.com/api
    description: Production server

security:
  - bearerAuth: []

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account and receive JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - password_confirmation
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: "John Doe"
                  description: User's full name
                email:
                  type: string
                  format: email
                  maxLength: 255
                  example: "john@example.com"
                  description: User's email address
                password:
                  type: string
                  minLength: 8
                  example: "password123"
                  description: User's password
                password_confirmation:
                  type: string
                  minLength: 8
                  example: "password123"
                  description: Password confirmation
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully registered"
                  user:
                    $ref: '#/components/schemas/User'
                  authorization:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                      type:
                        type: string
                        example: "bearer"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /login:
    post:
      tags:
        - Authentication
      summary: Login user and get JWT token
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                  description: User's email address
                password:
                  type: string
                  minLength: 8
                  example: "password123"
                  description: User's password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  token_type:
                    type: string
                    example: "bearer"
                  expires_in:
                    type: integer
                    example: 3600
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /logout:
    post:
      tags:
        - Authentication
      summary: Logout user and invalidate JWT token
      description: Logout the authenticated user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully logged out"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Get a new JWT token using the current token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                  token_type:
                    type: string
                    example: "bearer"
                  expires_in:
                    type: integer
                    example: 3600
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /user-profile:
    get:
      tags:
        - Authentication
      summary: Get authenticated user profile
      description: Retrieve the profile of the authenticated user
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'

  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      description: Retrieve a list of all posts with their comments
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostWithComments'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
    
    post:
      tags:
        - Posts
      summary: Create a new post
      description: Create a new blog post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - body
              properties:
                title:
                  type: string
                  maxLength: 255
                  example: "My New Post"
                  description: Post title
                body:
                  type: string
                  example: "This is the content of my new post."
                  description: Post content
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /posts/{id}:
    get:
      tags:
        - Posts
      summary: Get a specific post
      description: Retrieve a specific post by ID with its comments
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PostWithComments'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    
    put:
      tags:
        - Posts
      summary: Update a specific post
      description: Update an existing post
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - body
              properties:
                title:
                  type: string
                  maxLength: 255
                  example: "Updated Post Title"
                  description: Post title
                body:
                  type: string
                  example: "This is the updated content of my post."
                  description: Post content
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    delete:
      tags:
        - Posts
      summary: Delete a specific post
      description: Delete an existing post
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /posts/{postId}/comments:
    get:
      tags:
        - Comments
      summary: Get all comments for a specific post
      description: Retrieve all comments for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
    
    post:
      tags:
        - Comments
      summary: Create a new comment for a specific post
      description: Create a new comment for a specific post
      parameters:
        - name: postId
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: string
                  example: "This is a great post!"
                  description: Comment content
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /posts/{postId}/comments/{id}:
    get:
      tags:
        - Comments
      summary: Get a specific comment
      description: Retrieve a specific comment by ID
      parameters:
        - name: postId
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Comment retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    
    put:
      tags:
        - Comments
      summary: Update a specific comment
      description: Update an existing comment
      parameters:
        - name: postId
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: string
                  example: "Updated comment content"
                  description: Comment content
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    
    delete:
      tags:
        - Comments
      summary: Delete a specific comment
      description: Delete an existing comment
      parameters:
        - name: postId
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            example: 1
        - name: id
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Comment deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"

    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "My First Post"
        body:
          type: string
          example: "This is the content of my first post."
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"

    PostWithComments:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "My First Post"
        body:
          type: string
          example: "This is the content of my first post."
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'

    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        body:
          type: string
          example: "Great post!"
        user_id:
          type: integer
          example: 2
        post_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000000Z"

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: object
          additionalProperties: true

    UnauthorizedError:
      type: object
      properties:
        message:
          type: string
          example: "Unauthenticated."

    ForbiddenError:
      type: object
      properties:
        message:
          type: string
          example: "This action is unauthorized."

    NotFoundError:
      type: object
      properties:
        message:
          type: string
          example: "No query results for model [App\\Models\\Post] 1"

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Posts
    description: Blog post management endpoints
  - name: Comments
    description: Post comment management endpoints
